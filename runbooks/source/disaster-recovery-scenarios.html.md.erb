---
title: Cloud Platform Disaster Recovery Scenarios
weight: 91
last_reviewed_on: 2020-04-22
review_in: 3 months
---

# Cloud Platform Disaster Recovery Scenarios

This section will document various scenarios that will create an incident. Each scenario will have an impact and restore process.

## Losing a Namespace

### Impact 
A loss of a namespace will result in losing all resources within the namespace including ingress.

### Possible Cause
User error - Executing `kubectl delete ns my-namespace-dev` 

```
kubectl get all -n my-namespace-dev
No resources found in my-namespace-dev namespace.
```
### Restore process
As long as the namespace is over 3 hours old, it can be recovered using Velero.

First step is to find the name of the most recent backup of the `allnamespacebackup` schedule:

```
velero backup get

NAME                                       STATUS      CREATED                         EXPIRES   STORAGE LOCATION   SELECTOR
velero-allnamespacebackup-00000000000000   Completed   2020-03-30 12:00:37 +0100 BST   29d       default            <none>
```
Using the backup name, you can now run a `Velero restore` command to restore the deleted namespace.

Restore command:

```
velero restore create <restore-name> --from-backup <backup-name> --include-namespaces <namespace> --wait
```

Example:

```
velero restore create my-namespace-dev-restore --from-backup velero-allnamespacebackup-00000000000000 --include-namespaces my-namespace-dev --wait
```

Once completed, you should be able to see the namespace and all resources recovered:

```
kubectl get all -n my-namespace-dev

NAME                       READY   STATUS      RESTARTS   AGE
pod/pod1                   2/2     Running     0          1m

NAME                       TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)      AGE
service/service1           ClusterIP   None             None          443/TCP      1m

NAME                                 READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/deployment1          1/1     1            1           1m

NAME                                 DESIRED   CURRENT   READY   AGE
replicaset.apps/replicaset1          1         1         1       1m
```

## Losing the whole cluster

### Impact 

Severity : HIGH

Likelihood: LOW

Losing the whole kubernetes cluster will result in all services not being available. This means all the 
resources within all namespaces, networking, monitoring and logging systems.

### Possible Cause

Losing the whole cluster is less likely and the possible causes may vary. 

User error - Deleting all EC2 instances of `<cluster-name>` from console by accident

The first sign of this happening is likely to be Pagerduty alarms to the high/low priority slack channels.

### How this plan is tested:

This way of restoring the whole cluster have been tested with below procedure

1. Create cluster using the [script](https://github.com/ministryofjustice/cloud-platform-infrastructure/blob/master/create-cluster.rb)
2. Deploy [starter pack](https://github.com/ministryofjustice/cloud-platform-infrastructure/blob/master/terraform/cloud-platform-components/starter-pack.tf) to replicate user namespaces
3. Take backup of the whole cluster using [velero](https://runbooks.cloud-platform.service.justice.gov.uk/velero.html#velero-cluster-backups-and-disaster-recovery)
4. Destroy the cluster excluding the VPC using the [script](https://github.com/ministryofjustice/cloud-platform-infrastructure/blob/master/destroy-cluster.rb)
5. Create a cluster with the same name. That way velero can match the backup storage location
6. Restore the cluster from the backup taken in Step 3

### Assumptions
- VPC of the cluster is not deleted
- Not all Kubernetes resources are tested for Recovery
- Not all AWS resources are tested for reconnecting to application after restore
- Smoke tests are run excluding one for `live-1`
- Terraform state have been recreated

### Restore process
Any namespaces over 3 hours old can be recovered using Velero (newer namespaces might not have been backed up before the incident occurred).

Create the cluster with the **same** name from the [source code](https://github.com/ministryofjustice/cloud-platform-infrastructure/blob/master/create-cluster.rb)
and provide the exisiting `vpc-name`. This will link the velero backup locations to the lost cluster. 

Find the name of the most recent backup of the `allnamespacebackup` schedule:

```
velero backup get

NAME                                       STATUS      CREATED                         EXPIRES   STORAGE LOCATION   SELECTOR
velero-allnamespacebackup-00000000000000   Completed   2020-03-30 12:00:37 +0100 BST   29d       default            <none>
```
Using the backup name, you can now run a `velero restore` command to restore the deleted namespace.

Restore command:

```
velero restore create <restore-name> --from-backup <backup-name> --wait
```

Example:

```
velero restore create my-namespace-dev-restore --from-backup velero-allnamespacebackup-00000000000000 --wait
```

Once completed, you should be able to see resources in all namespaces recovered. 

Check the status of the restore and look for errors and warnings:

```
velero restore describe velero-allnamespacebackup-00000000000000-00000000000000
```

Check the logs of the restore:

```
velero restore logs velero-allnamespacebackup-00000000000000-00000000000000

```

