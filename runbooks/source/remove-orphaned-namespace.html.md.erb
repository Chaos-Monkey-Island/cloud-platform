---
title: Remove 'orphaned' namespaces and AWS resources
weight: 200
---

# Remove 'orphaned' namespaces and AWS resources

Cluster namespaces, and the AWS resources associated with them, should be removed automatically by the build pipeline.

Sometimes this process doesn't work correctly, or users don't follow it, and we end up with 'orphaned' namespaces in the cluster. i.e. namespaces which exist in the kubernetes cluster, but which have no associated source code in the [environments repo].

You can remove these namespaces, and their AWS resources, using the [environments checker].

### 1. `git clone` the [environments checker] repository

### 2. Create a `.env.live1` file, containing the environment variables the checker requires

The repository contains an `example.env.live-1` file. Copy this to `.env.live1` and replace the placeholders with real AWS credentials.

### 3. Do a dry run of deleting the target namespace

```bash
. .env.live1; make delete-namespace NAMESPACE=[orphaned namespace name]
```

This will run a `terraform plan` showing the resources that the script is going to delete.

### 4. Delete the AWS resources and the cluster namespace

```bash
. .env.live1; make delete-namespace NAMESPACE=[orphaned namespace name] DESTROY=destroy
```

This will actually delete the AWS resources and the namespace itself.

## Possible Errors

AWS resources which were created using older versions of our terraform modules defined the provider inside the code which invoked the module. The process above will not work for those resources, because the module definition disappeared when the source code was removed, so terraform doesn't know how to delete the resource.

Fixing these problems usually requires getting the original namespace source code by finding the commit in the git log of the [environments repo] where it was removed, and checking out a version before then.

Once you have the source code, you can use `terraform init` and `terraform plan` to target and destroy the specific AWS resources which are causing problems.

See the runbook for [rotating AWS credentials] for an example of doing this.

[environments repo]: https://github.com/ministryofjustice/cloud-platform-environments
[environments checker]: https://github.com/ministryofjustice/cloud-platform-environments-checker
[rotating AWS credentials]: rotate-user-aws-credentials.html

